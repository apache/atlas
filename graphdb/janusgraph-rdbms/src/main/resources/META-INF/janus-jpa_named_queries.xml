<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor
    license agreements. See the NOTICE file distributed with this work for additional
    information regarding copyright ownership. The ASF licenses this file to
    You under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of
    the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required
    by applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied. See the License for the specific
    language governing permissions and limitations under the License. -->
<entity-mappings version="1.0"
                 xmlns="http://java.sun.com/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd ">

    <named-query name="JanusStore.getIdByName">
        <query>SELECT s.id FROM JanusStore s WHERE s.name = :name</query>
    </named-query>

    <named-query name="JanusKey.getIdByStoreIdAndName">
        <query>SELECT k.id FROM JanusKey k WHERE k.storeId = :storeId AND k.name = :name</query>
    </named-query>

    <named-query name="JanusKey.getKeysByStoreId">
        <query>SELECT k.name FROM JanusKey k WHERE k.storeId = :storeId</query>
    </named-query>

    <named-query name="JanusColumn.getColumnIdByKeyIdAndName">
        <query>SELECT c.id
                 FROM JanusColumn c
                WHERE c.keyId = :keyId AND c.name = :name</query>
    </named-query>

    <named-query name="JanusColumn.updateById">
        <query>UPDATE JanusColumn c SET c.val = :val WHERE c.id = :id</query>
    </named-query>

    <named-query name="JanusColumn.updateByKeyIdAndName">
        <query>UPDATE JanusColumn c SET c.val = :val WHERE c.keyId = :keyId AND c.name = :name</query>
    </named-query>

    <named-query name="JanusColumn.deleteByKeyIdAndName">
        <query>DELETE FROM JanusColumn c WHERE c.keyId = :keyId AND c.name = :name</query>
    </named-query>

    <named-query name="JanusColumn.getValueByStoreIdKeyIdName">
        <query>SELECT c.val FROM JanusColumn c WHERE c.keyId = :keyId AND c.name = :name</query>
    </named-query>

    <named-query name="JanusColumn.getColumnsByKeyIdStartNameEndName">
        <query>SELECT c.name, c.val
                 FROM JanusColumn c
                WHERE c.keyId = :keyId AND c.name >= :startName AND c.name &lt; :endName</query>
    </named-query>

    <named-query name="JanusColumn.getKeysByStoreIdColumnRange">
        <query>SELECT k.id, k.name, c.name, c.val
                 FROM JanusColumn c, JanusKey k
                WHERE k.storeId = :storeId
                  AND c.keyId = k.id AND c.name >= :startName AND c.name &lt; :endName
                ORDER BY k.name, c.name</query>
    </named-query>

    <named-query name="JanusColumn.getKeysByStoreIdKeyRangeColumnRange">
        <query>SELECT k.id, k.name, c.name, c.val
                 FROM JanusColumn c, JanusKey k
                WHERE k.storeId = :storeId AND k.name >= :startKey AND k.name &lt; :endKey
                  AND c.keyId = k.id AND c.name >= :startName AND c.name &lt; :endName
                ORDER BY k.name, c.name</query>
    </named-query>
</entity-mappings>
